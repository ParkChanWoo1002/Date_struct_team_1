#include <iostream>
#include <fstream>
#include <stack>
using namespace std;

int main() {
	int test_case;
	int miro[16][16];
	int s_Row, s_Col, cur_r, cur_c;
	char ch;

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	for (int T = 1; T <= 10; T++) {
		cin >> test_case;
		cin.get(ch);
		for (int row = 0; row < 16; row++) {
			\
				for (int col = 0; col < 16; col++) {
					int input = cin.get();
					miro[row][col] = input - 48;
					if (input - 48 == 2) {
						s_Row = row; s_Col = col;
					}
				}
			cin.get(ch);
		}
		// 탐색 시작		
		stack<pair<int, int>> s; // row,col pair를 stack에 저장
		cur_r = s_Row; cur_c = s_Col;
		s.push(pair<int, int>(cur_r, cur_c)); // 시작 위치를 stack에 삽입

		while (1) {
			miro[cur_r][cur_c] = 8;

			// 오른쪽이 뚫려있을 경우
			if (miro[cur_r][cur_c + 1] == 0 && s.top() != pair<int, int>(cur_r, cur_c + 1)) {
				s.push(pair<int, int>(cur_r, cur_c));
				cur_c = cur_c + 1;
			}
			// 왼쪽이 뚫려있을 경우
			else if (miro[cur_r][cur_c - 1] == 0 && s.top() != pair<int, int>(cur_r, cur_c - 1)) {
				s.push(pair<int, int>(cur_r, cur_c));
				cur_c = cur_c - 1;
			}
			// 아래쪽이 뚫려있을 경우
			else if (miro[cur_r + 1][cur_c] == 0 && s.top() != pair<int, int>(cur_r + 1, cur_c)) {
				s.push(pair<int, int>(cur_r, cur_c));
				cur_r = cur_r + 1;
			}
			// 위쪽이 뚫려있을 경우
			else if (miro[cur_r - 1][cur_c] == 0 && s.top() != pair<int, int>(cur_r - 1, cur_c)) {
				s.push(pair<int, int>(cur_r, cur_c));
				cur_r = cur_r - 1;
			}

			else if (miro[cur_r][cur_c + 1] == 3 || miro[cur_r][cur_c - 1] == 3 ||
				miro[cur_r + 1][cur_c] == 3 || miro[cur_r - 1][cur_c] == 3) {
				cout << "#" << T << " " << 1 << "\n";
				break;
			}

			else {
				cur_r = s.top().first;
				cur_c = s.top().second;
				s.pop();
			}

			if (s.empty()) {
				cout << "#" << T << " " << 0 << "\n";
				break;
			}
		}
	}

}
