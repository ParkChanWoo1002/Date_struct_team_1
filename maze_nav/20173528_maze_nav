```
#pragma once
#include <iostream>

using namespace std;

struct Location
{
	int _x;
	int _y;
	Location(int x = 0, int y = 0)
	{
		_x = x;
		_y = y;
	}
};

class Stack 
{
	int* dataArray;
	int top;			// Stack에서 가장 마지막 데이터를 가르키는 index
	int size; 			// 저장된 데이터의 수
	int length;			// 저장 공간의 크기
public:
	Stack(int l = 255) : size(0), top(-1), length(l) { dataArray = new int[l](); }
	~Stack() { delete[] dataArray; }
	// Stack의 저장된 데이터를 제일 앞에 있는 데이터 부터 뒤에 있는 데이터 순으로 화면에 출력
	friend ostream& operator<<(ostream& os, const Stack& s);     // Impl 1
	bool isFull();     // Stack 의 저장 공간을 다 사용하고 있으면 true 아니면 flase 반환
	bool isEmpty();    //  Stack 가 비어 있으면 true 아니면 false 반환
	void push(int data);  // Stack에 데이터를 저장
	int pop();    // Stack에 저장된 데이터 중 top이 가르키는 데이터를 반환
	int getLength() { return length; }
	int getSize() { return size; }
};

class Maze
{
	int width;
	int height;
	int **map;
	Stack mazeStack;
	Location start;
	Location exit;
public:
	Maze(int w, int h)
	{
		width = w;
		height = h;
		map = new int*[w];
		for (int i = 0; i < h; i++)
			map[i] = new int[h];
	}
	~Maze() 
	{
		for (int i = 0; i < height; ++i)
		{
			delete[] map[i]; 
		}
		delete[] map;
	}
};
```
